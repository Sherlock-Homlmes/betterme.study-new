version: "3.9"

services:
  file-service:
    image: bettermie/file-service
    volumes:
      - .:/var/task/file_service
    working_dir: /var/task/file_service
    user: "${COMPOSE_UID:-1000}:${COMPOSE_GID:-1000}"
    environment:
      - HOME=/tmp
      - ENV=DEV
    networks:
      - common-net
    ports:
      - 8765:8080
    command:
      [
        "uvicorn",
        "main:app",
        "--reload",
        "--host=0.0.0.0",
        "--port=8080",
        "--workers=3",
      ]
    entrypoint: ["poetry", "run"]
    deploy:
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: pause
        monitor: 60s

  file-service-worker:
    image: bettermie/file-service
    volumes:
      - .:/var/task/file_service
    working_dir: /var/task/file_service
    user: "${COMPOSE_UID:-1000}:${COMPOSE_GID:-1000}"
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - common-net
    command: ["rq", "worker", "high", "low", "--url", "rediss://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0"]
    entrypoint: ["poetry", "run"]
    deploy:
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: pause
        monitor: 60s

  file-service-worker-high-priority:
    image: bettermie/file-service
    volumes:
      - .:/var/task/file_service
    working_dir: /var/task/file_service
    user: "${COMPOSE_UID:-1000}:${COMPOSE_GID:-1000}"
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - common-net
    command: ["rq", "worker", "high", "--url", "rediss://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0"]
    entrypoint: ["poetry", "run"]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: pause
        monitor: 60s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    command: tunnel run --token ${TUNNEL_TOKEN}
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    networks:
      - common-net
    depends_on:
      - file-service
    restart: unless-stopped

#Docker Networks
networks:
  common-net:
    driver: overlay
    # driver: bridge
# docker swarm join-token manager
